# $OpenBSD$
#
# Macros
#
ext_addr="127.0.0.1"
webhost1="10.0.0.1"
webhost2="10.0.0.2"
sshhost1="10.0.0.3"
gw1=10.0.1.1
gw2=10.0.1.2

#
# Global Options
#
interval 10
log updates
prefork 5
snmp trap "/tmp/snmp.sock"
timeout 3000

#
# Each table will be mapped to a pf table.
#
table <mischosts> { 10.1.0.1, 127.0.0.1 priority 52 }
table <webhosts> { $webhost1, $webhost2, $sshhost1 parent 2 }
table <fallback> disable { 127.0.0.1 retry 2 }
table <gateways> { $gw1 ip ttl 1, $gw2 ip ttl 1 }

#
# Services will be mapped to a rdr rule.
#
redirect www {
	listen on $ext_addr port 80 interface trunk0

	# tag every packet that goes thru the rdr rule with RELAYD
	tag RELAYD

	forward to <webhosts> check http "/" code 200
	forward to <fallback> check icmp
}

#
# Relay and protocol for HTTP layer 7 loadbalancing and SSL acceleration
#
http protocol httpssl {
	return error style "body { background: #a00000; color: white; }"

	header append "$REMOTE_ADDR" to "X-Forwarded-For"
	header mark "X-Forwarded-For" with 65534 log
	header append "$SERVER_ADDR:$SERVER_PORT" to "X-Forwarded-By"
	header change "Connection" to "close" marked 65534 log
	header log "Host"
	url expect digest 90abc8e71869ad82c9d17a93c9c4a8d1 log

	# Various TCP performance options
	tcp { nodelay, sack, socket buffer 65536, backlog 128 }

	ssl { no sslv2, sslv3, tlsv1, ciphers HIGH }
	ssl session cache disable
}

relay wwwssl {
	# Run as a SSL accelerator
	listen on $ext_addr port 443 ssl
	protocol httpssl

	# Forward to hosts in the webhosts table using a src/dst hash
	forward to <webhosts> port http mode loadbalance \
		check http "/" code 200
}

#
# Relay and protocol for simple TCP forwarding on layer 7
#
protocol sshtcp {
	# The TCP_NODELAY option is required for "smooth" terminal sessions
	tcp nodelay
}

relay sshgw {
	# Run as a simple TCP relay
	listen on $ext_addr port 2222
	protocol sshtcp

	# Forward to the shared carp(4) address of an internal gateway
	forward to $sshhost1 port 22
}

#
# Relay and protocol for a transparent HTTP proxy
#
http protocol httpfilter {
	# Return HTTP/HTML error pages to the client
	return error

	# Block disallowed sites
	label "URL filtered!"
	request url filter "www.example.com/a"

	# Block disallowed browsers
	label "Please try a <em>different Browser</em>"
	header filter "Mozilla/4.0 (compatible; MSIE *" from "User-Agent"

	# Block some well-known Instant Messengers
	label "Instant messenger disallowed!"
	response header filter "application/x-msn-messenger" from "Content-Type"
	response header filter "app/x-hotbar-xip20" from "Content-Type"
	response header filter "application/x-icq" from "Content-Type"
	response header filter "AIM/HTTP" from "Content-Type"
	no label
	response header filter "application/x-comet-log" from "Content-Type"
}

relay httpproxy {
	# Listen on localhost, accept diverted connections from pf(4)
	listen on 127.0.0.1 port 8080
	protocol httpfilter

	# Forward to the original target host
	forward to destination
	forward to <fallback> check icmp
}

router "uplinks" {
	route 0.0.0.0/0
	forward to <gateways> check icmp
}

router "routefoo" {
	forward to <gateways> check icmp
	route 1.1.1.0/0
	rtable 128
	disable
}

router "routebar" {
	forward to <gateways> check icmp
	route 2.2.2.0/0
	rtlabel "routebar"
	disable
}
